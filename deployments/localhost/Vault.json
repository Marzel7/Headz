{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "updateInterval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counterBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x4bf594109c3d6f76bf9acbb92df987118c59a2476a3fc608cddeb7ced7bb8674",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "338482",
    "logsBloom": "0x
    "blockHash": "0x836e8c8da2e8659cc92381b2f79d591825319d234268d5b53cabdb6bea6f6474",
    "transactionHash": "0x4bf594109c3d6f76bf9acbb92df987118c59a2476a3fc608cddeb7ced7bb8674",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "338482",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "d29d0a4aa605700d4f9021892298b8ef",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"updateInterval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counterBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"performUpkeep(bytes)\":{\"details\":\"The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.\",\"params\":{\"performData\":\"is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"performUpkeep(bytes)\":{\"notice\":\"method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Automation/Vault.sol\":\"Vault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"contracts/Automation/Vault.sol\":{\"content\":\"pragma solidity ^0.8.0;\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\ncontract Vault is KeeperCompatibleInterface {\\n    address public owner;\\n    uint256 counter;\\n\\n    constructor(uint256 updateInterval) {\\n        owner = msg.sender;\\n        interval = updateInterval;\\n        lastTimeStamp = block.timestamp;\\n    }\\n\\n    function balanceOf() external view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    uint256 public immutable interval;\\n    uint256 public lastTimeStamp;\\n\\n    function checkUpkeep(bytes calldata)\\n        external\\n        override\\n        returns (bool upkeepNeeded, bytes memory performData)\\n    {\\n        upkeepNeeded = (block.timestamp - lastTimeStamp) > interval;\\n    }\\n\\n    function performUpkeep(bytes calldata performData) external override {\\n        if ((block.timestamp - lastTimeStamp) > interval) {\\n            lastTimeStamp = block.timestamp;\\n            (bool success, ) = payable(owner).call{value: 0.1 ether}(\\\"\\\");\\n            require(success, \\\"failed to transfer ETH\\\");\\n            counter++;\\n        }\\n    }\\n\\n    function counterBalance() public view returns (uint256) {\\n        return counter;\\n    }\\n\\n    function getInterval() external view returns (uint256) {\\n        return interval;\\n    }\\n\\n    function getBalance() external view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x71d4ec37b196533dda8e3eaea099c62b705d31cf6ea056c602caf34d02e20c9e\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b506040516104f03803806104f083398101604081905261002f9161004d565b600080546001600160a01b0319163317905560805242600255610066565b60006020828403121561005f57600080fd5b5051919050565b60805161045a6100966000396000818161017a015281816101b0015281816101d401526102d4015261045a6000f3fe60806040526004361061008a5760003560e01c8063722713f711610059578063722713f7146100965780638365df161461011e5780638da5cb5b1461013357806391ad27b41461016b578063947a36fb1461019e57600080fd5b806312065fe0146100965780633f3b3b27146100b85780634585e33b146100ce5780636e04ff0d146100f057600080fd5b3661009157005b600080fd5b3480156100a257600080fd5b50475b6040519081526020015b60405180910390f35b3480156100c457600080fd5b506100a560025481565b3480156100da57600080fd5b506100ee6100e936600461030b565b6101d2565b005b3480156100fc57600080fd5b5061011061010b36600461030b565b6102ce565b6040516100af92919061037d565b34801561012a57600080fd5b506001546100a5565b34801561013f57600080fd5b50600054610153906001600160a01b031681565b6040516001600160a01b0390911681526020016100af565b34801561017757600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006100a5565b3480156101aa57600080fd5b506100a57f000000000000000000000000000000000000000000000000000000000000000081565b7f00000000000000000000000000000000000000000000000000000000000000006002544261020191906103f2565b11156102ca5742600255600080546040516001600160a01b039091169067016345785d8a0000908381818185875af1925050503d8060008114610260576040519150601f19603f3d011682016040523d82523d6000602084013e610265565b606091505b50509050806102b35760405162461bcd60e51b81526020600482015260166024820152750ccc2d2d8cac840e8de40e8e4c2dce6cccae4408aa8960531b604482015260640160405180910390fd5b600180549060006102c383610409565b9190505550505b5050565b600060607f00000000000000000000000000000000000000000000000000000000000000006002544261030191906103f2565b1191509250929050565b6000806020838503121561031e57600080fd5b823567ffffffffffffffff8082111561033657600080fd5b818501915085601f83011261034a57600080fd5b81358181111561035957600080fd5b86602082850101111561036b57600080fd5b60209290920196919550909350505050565b821515815260006020604081840152835180604085015260005b818110156103b357858101830151858201606001528201610397565b818111156103c5576000606083870101525b50601f01601f191692909201606001949350505050565b634e487b7160e01b600052601160045260246000fd5b600082821015610404576104046103dc565b500390565b600060001982141561041d5761041d6103dc565b506001019056fea264697066735822122030f35c1f79a8c2da349eae288746027de9f7778baeb02fb027a1e507b2f7fd8964736f6c634300080c0033",
  "deployedBytecode": "0x60806040526004361061008a5760003560e01c8063722713f711610059578063722713f7146100965780638365df161461011e5780638da5cb5b1461013357806391ad27b41461016b578063947a36fb1461019e57600080fd5b806312065fe0146100965780633f3b3b27146100b85780634585e33b146100ce5780636e04ff0d146100f057600080fd5b3661009157005b600080fd5b3480156100a257600080fd5b50475b6040519081526020015b60405180910390f35b3480156100c457600080fd5b506100a560025481565b3480156100da57600080fd5b506100ee6100e936600461030b565b6101d2565b005b3480156100fc57600080fd5b5061011061010b36600461030b565b6102ce565b6040516100af92919061037d565b34801561012a57600080fd5b506001546100a5565b34801561013f57600080fd5b50600054610153906001600160a01b031681565b6040516001600160a01b0390911681526020016100af565b34801561017757600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006100a5565b3480156101aa57600080fd5b506100a57f000000000000000000000000000000000000000000000000000000000000000081565b7f00000000000000000000000000000000000000000000000000000000000000006002544261020191906103f2565b11156102ca5742600255600080546040516001600160a01b039091169067016345785d8a0000908381818185875af1925050503d8060008114610260576040519150601f19603f3d011682016040523d82523d6000602084013e610265565b606091505b50509050806102b35760405162461bcd60e51b81526020600482015260166024820152750ccc2d2d8cac840e8de40e8e4c2dce6cccae4408aa8960531b604482015260640160405180910390fd5b600180549060006102c383610409565b9190505550505b5050565b600060607f00000000000000000000000000000000000000000000000000000000000000006002544261030191906103f2565b1191509250929050565b6000806020838503121561031e57600080fd5b823567ffffffffffffffff8082111561033657600080fd5b818501915085601f83011261034a57600080fd5b81358181111561035957600080fd5b86602082850101111561036b57600080fd5b60209290920196919550909350505050565b821515815260006020604081840152835180604085015260005b818110156103b357858101830151858201606001528201610397565b818111156103c5576000606083870101525b50601f01601f191692909201606001949350505050565b634e487b7160e01b600052601160045260246000fd5b600082821015610404576104046103dc565b500390565b600060001982141561041d5761041d6103dc565b506001019056fea264697066735822122030f35c1f79a8c2da349eae288746027de9f7778baeb02fb027a1e507b2f7fd8964736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "performUpkeep(bytes)": {
        "details": "The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.",
        "params": {
          "performData": "is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "performUpkeep(bytes)": {
        "notice": "method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6281,
        "contract": "contracts/Automation/Vault.sol:Vault",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6283,
        "contract": "contracts/Automation/Vault.sol:Vault",
        "label": "counter",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 6319,
        "contract": "contracts/Automation/Vault.sol:Vault",
        "label": "lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}